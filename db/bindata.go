// Code generated by go-bindata.
// sources:
// migrations/001_users.sql
// migrations/002_tokens.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations001_usersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcf\xb1\xaf\x82\x30\x10\xc7\xf1\xfd\xfe\x8a\x1b\x21\xef\x91\xbc\xbc\xc8\xc4\x54\xa4\x31\xc4\x0a\xa4\xc2\xc0\x44\x4e\xa9\xd2\x44\x28\x69\x51\xfe\x7d\xe3\x04\x0e\x3a\x7f\x7e\xb9\xdc\x37\x08\xf0\xa7\xd7\x57\x4b\x93\xc2\x6a\x04\xd8\x4a\xce\x4a\x8e\x25\x8b\x05\xc7\xbb\x53\xd6\x79\x80\xa8\x5b\x8c\xd3\xdd\x91\xcb\x94\x09\xcc\xf2\x12\xb3\x4a\x88\x5f\x40\x1c\xa8\x57\xf8\x20\x7b\xee\xc8\x7a\xff\x61\xe8\xbf\xa9\xea\x49\xdf\x56\xbc\x59\x18\x0b\x99\x1e\x98\xac\x71\xcf\xeb\xd7\xb4\xa5\x49\x35\xe6\xd2\x9c\xb4\x9d\xba\xcf\x17\x47\x72\x6e\x36\xb6\xfd\xb2\xe8\xcc\xb0\xbc\x14\xfe\x2d\x0a\x7e\x04\xb0\xee\x4d\xcc\x3c\x00\x24\x32\x2f\xd6\xbd\xd1\x33\x00\x00\xff\xff\xad\xfb\xd2\x3f\x13\x01\x00\x00")

func migrations001_usersSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations001_usersSql,
		"migrations/001_users.sql",
	)
}

func migrations001_usersSql() (*asset, error) {
	bytes, err := migrations001_usersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/001_users.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations002_tokensSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x4d\xab\x82\x40\x18\xc5\xf1\xfd\xf3\x29\xce\x52\xb9\xd7\xc5\x15\x6e\x04\xae\x2c\x67\x11\x15\xc9\x60\x0b\x57\x32\xc4\x90\x43\xf3\x22\xce\x63\x42\x9f\x3e\x42\x88\xda\x9e\xf3\x5f\xfc\xb2\x0c\x3f\xce\x5c\x47\xc5\x1a\xe7\x81\x68\x2b\x45\xd9\x08\x34\xe5\xe6\x20\xc0\xe1\xa6\x7d\x4c\x08\xd0\x4e\x19\x8b\xbb\x1a\x2f\xbd\x1a\x93\xfc\x7f\x95\xc2\x07\x86\x9f\xac\xfd\x25\x2c\xe1\xfb\xfe\xcb\xd7\x29\x6a\xb9\x3b\x96\xb2\xc5\x5e\xb4\x78\x25\x56\x45\xee\xa2\xf6\xdc\x29\x06\x1b\xa7\x23\x2b\x37\x60\x36\xdc\x87\x69\x59\xf0\x08\x5e\x53\x5a\x10\x7d\xaa\xaa\x30\x7b\xa2\x4a\x9e\xea\x2f\x55\xf1\x0c\x00\x00\xff\xff\x68\xc9\xe9\xf0\xba\x00\x00\x00")

func migrations002_tokensSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations002_tokensSql,
		"migrations/002_tokens.sql",
	)
}

func migrations002_tokensSql() (*asset, error) {
	bytes, err := migrations002_tokensSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/002_tokens.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/001_users.sql":  migrations001_usersSql,
	"migrations/002_tokens.sql": migrations002_tokensSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"001_users.sql":  &bintree{migrations001_usersSql, map[string]*bintree{}},
		"002_tokens.sql": &bintree{migrations002_tokensSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
